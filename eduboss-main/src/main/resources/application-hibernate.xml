<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd

       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.directwebremoting.org/schema/spring-dwr http://www.directwebremoting.org/schema/spring-dwr/spring-dwr-3.0.xsd"
	default-autowire="byName">

	
	<bean id="writeDataSource"  
      class="org.apache.commons.dbcp.BasicDataSource"  
      destroy-method="close">  
	    <property name="driverClassName" value="${jdbc.driverClass}"/>  
	    <property name="url" value="${jdbc.writeUrl}"/>  
	    <property name="username" value="${jdbc.username}"/>  
	    <property name="password" value="${jdbc.password}"/>  
	    <!--maxActive: 最大连接数量-->    
	    <property name="maxActive" value="300"/>  
	    <!--minIdle: 最小空闲连接-->    
	    <property name="minIdle" value="5"/>  
	    <!--maxIdle: 最大空闲连接-->    
	    <property name="maxIdle" value="120"/>  
	    <!--initialSize: 初始化连接-->    
	    <property name="initialSize" value="30"/>  
	    <!-- 连接被泄露时是否打印 -->  
	    <property name="logAbandoned" value="true"/>  
	    <!--removeAbandoned: 是否自动回收超时连接-->    
	    <property name="removeAbandoned"  value="true"/>  
	    <!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->    
	    <property name="removeAbandonedTimeout" value="10"/>
	    <!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒-->  
	    <property name="maxWait" value="1000"/>  
	    <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->  
	    <property name="timeBetweenEvictionRunsMillis" value="300000"/>
	    <!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->  
	    <property name="numTestsPerEvictionRun" value="300"/>
	    <!-- 1000 * 60 * 30  连接在池中保持空闲而不被空闲连接回收器线程-->  
	    <property name="minEvictableIdleTimeMillis" value="3600000"/>
	    <property name="validationQuery" value="SELECT 1"/>
	    <property name="testWhileIdle" value="true"/>
	</bean> 
	
	<bean id="readDataSource1" parent="writeDataSource">
       <property name="url" value="${jdbc.readUrl}" />
   </bean>
   
   
 <!--   <bean id="readDataSource2" parent="readDataSource1">
       <property name="jdbcUrl" value="${jdbc.readUrl2}" />
   </bean> -->

    <bean id="dataSource" class="com.eduboss.datasource.ReadWriteDataSource">
        <property name="writeDataSource" ref="writeDataSource"/>
        <property name="readDataSourceMap">
           <map>
              <entry key="readDataSource1" value-ref="readDataSource1"/>
              <!-- <entry key="readDataSource2" value-ref="readDataSource2"/> -->
             <!--  <entry key="readDataSource3" value-ref="readDataSource1"/>
              <entry key="readDataSource4" value-ref="readDataSource1"/> -->
           </map>
        </property>
    </bean>
	
    <bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<!-- 注入数据源 相关信息看源码 -->
		<property name="dataSource" ref="dataSource" />
		<property name="mappingResources">
			 <list>
			 	<value>com/opensymphony/workflow/spi/hibernate3/HibernateWorkflowEntry.hbm.xml</value>
			 	<value>com/opensymphony/workflow/spi/hibernate3/HibernateCurrentStep.hbm.xml</value>
			 	<value>com/opensymphony/workflow/spi/hibernate3/HibernateHistoryStep.hbm.xml</value>
			 </list>
		</property>
		<!-- hibernate配置信息 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.connection.autocommit">${hibernate.connection.autocommit}</prop>
				<prop key="javax.persistence.validation.mode">none</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate3.SpringSessionContext</prop>
                <!--<prop key="hibernate.jdbc.factory_class">net.bull.javamelody.HibernateBatcherFactory</prop>-->
				<!-- 开启二级缓存 ehcache -->
				<!-- <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.cache.provider_configuration_file_resource_path}
				</prop> -->
			</props>
		</property>
		<!-- 扫描hibernate注解配置的domain -->
        <property  name ="packagesToScan" >
            <list>
                <value>com.eduboss.domain</value>
                <value>com.pad.entity</value>
            </list>
        </property>
			
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
		<!-- osworkflow工作流 -->
  	<bean id="propertySetDelegate" class="com.opensymphony.workflow.util.PropertySetDelegateImpl"> 
 	</bean>
	
	<bean id="workflowStore" class="com.opensymphony.workflow.spi.hibernate3.SpringHibernateWorkflowStore">
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
         <property name="propertySetDelegate">
            <ref bean="propertySetDelegate"/>
        </property>
    </bean>

	 <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    
    <bean id="workflowFactory" class="com.opensymphony.workflow.spi.hibernate.SpringWorkflowFactory" init-method="init">
        <property name="resource">
            <value>workflows.xml</value>
        </property>
        <property name="reload">
            <value>true</value>
        </property>
    </bean>

    <bean id="osworkflowConfiguration" class="com.opensymphony.workflow.config.SpringConfiguration">
        <property name="store">
            <ref local="workflowStore"/>
        </property>
        <property name="factory">
            <ref local="workflowFactory"/>
        </property>
    </bean>

	<!-- 将工作流的function和condition交给spring管理 -->  
    <bean id="workflowTypeResolver" class="com.opensymphony.workflow.util.SpringTypeResolver">
    </bean>
    
     <bean id="workflow" class="com.opensymphony.workflow.basic.BasicWorkflow" scope="prototype">
     	<constructor-arg value="eduboss" />
     	<property name="configuration" ref="osworkflowConfiguration" />
    	 <property name="resolver" ref="workflowTypeResolver" />
  	</bean>
	
	<!-- 配置事务增强处理Bean，指定事务管理器 -->
	<!-- <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="load*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice> -->

	<!-- <aop:config>
		配置切入点
		<aop:pointcut id="transactionPointcut"
			expression="execution(* com.eduboss.service..*Impl.*(..))" />
		指定在txAdvice切入点应用txAdvice事务增强处理
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config> -->
	
	
	<bean id="readWriteDataSourceTransactionProcessor" class="com.eduboss.datasource.ReadWriteDataSourceProcessor">
       <property name="forceChoiceReadWhenWrite" value="false"/>
    </bean>
        
    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="transactionPointcut" expression="execution(* com.eduboss.service..*Impl.*(..)) || execution(* com.eduboss.openapi.rpc..*Impl.*(..))
        || execution(* com.pad.service..*Impl.*(..))" />
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut"/>
        
        <!-- 通过AOP切面实现读/写库选择 -->
        <aop:aspect order="-2147483648" ref="readWriteDataSourceTransactionProcessor">
           <aop:around pointcut-ref="transactionPointcut" method="determineReadOrWriteDB"/>
        </aop:aspect>
    </aop:config>
    
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="merge*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="put*" propagation="REQUIRED"/>
            
            <tx:method name="query*" read-only="true" propagation="SUPPORTS" />
            <tx:method name="use*" read-only="true" propagation="SUPPORTS" />
            <tx:method name="get*" read-only="true" propagation="SUPPORTS" />
            <tx:method name="count*" read-only="true" propagation="SUPPORTS" />
            <tx:method name="find*" read-only="true" propagation="SUPPORTS" />
            <tx:method name="list*" read-only="true" propagation="SUPPORTS" />
            <tx:method name="load*" read-only="true" propagation="SUPPORTS" />
            <tx:method name="calc*" read-only="true" propagation="SUPPORTS" />
            <tx:method name="is*" read-only="true" propagation="SUPPORTS" />
            <tx:method name="has*" read-only="true" propagation="SUPPORTS" />
            <tx:method name="check*" read-only="true" propagation="SUPPORTS" />
            
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

</beans>